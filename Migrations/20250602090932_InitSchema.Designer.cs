// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt_SBD.Data;

#nullable disable

namespace Projekt_SBD.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250602090932_InitSchema")]
    partial class InitSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Projekt_SBD.Models.Klienci", b =>
                {
                    b.Property<int>("Id_klienta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_klienta"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_klienta");

                    b.ToTable("Klienci");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Pracownicy", b =>
                {
                    b.Property<int>("Id_Pracownika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Pracownika"));

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Pracownika");

                    b.ToTable("Pracownicy");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Przedmioty", b =>
                {
                    b.Property<int>("Id_Przedmiotu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Przedmiotu"));

                    b.Property<string>("Dostepnosc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Przedmiotu");

                    b.ToTable("Przedmioty");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Raporty", b =>
                {
                    b.Property<int>("Id_Raportu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Raportu"));

                    b.Property<DateTime>("Data_Generacji")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Pracownika")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typ_Raportu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Raportu");

                    b.HasIndex("Id_Pracownika");

                    b.ToTable("Raporty");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Wypozyczenia", b =>
                {
                    b.Property<long>("Id_Wypozyczenia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id_Wypozyczenia"));

                    b.Property<DateTime>("Data_Wypozyczenia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Data_zwrotu")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Klienta")
                        .HasColumnType("int");

                    b.Property<int>("Id_Przedmiotu")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Wypozyczenia");

                    b.HasIndex("Id_Klienta");

                    b.HasIndex("Id_Przedmiotu");

                    b.ToTable("Wypozyczenia");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Zwroty", b =>
                {
                    b.Property<long>("Id_Zwrotu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id_Zwrotu"));

                    b.Property<DateTime>("Data_zwrotu")
                        .HasColumnType("datetime2");

                    b.Property<long>("Id_Wypozyczenia")
                        .HasColumnType("bigint");

                    b.Property<string>("Stan_Przedmiotu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uwagi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Zwrotu");

                    b.HasIndex("Id_Wypozyczenia")
                        .IsUnique();

                    b.ToTable("Zwroty");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Raporty", b =>
                {
                    b.HasOne("Projekt_SBD.Models.Pracownicy", "Pracownik")
                        .WithMany("Raporty")
                        .HasForeignKey("Id_Pracownika")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pracownik");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Wypozyczenia", b =>
                {
                    b.HasOne("Projekt_SBD.Models.Klienci", "Klient")
                        .WithMany("Wypozyczenia")
                        .HasForeignKey("Id_Klienta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt_SBD.Models.Przedmioty", "Przedmiot")
                        .WithMany("Wypozyczenia")
                        .HasForeignKey("Id_Przedmiotu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klient");

                    b.Navigation("Przedmiot");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Zwroty", b =>
                {
                    b.HasOne("Projekt_SBD.Models.Wypozyczenia", "Wypozyczenie")
                        .WithOne("Zwrot")
                        .HasForeignKey("Projekt_SBD.Models.Zwroty", "Id_Wypozyczenia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wypozyczenie");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Klienci", b =>
                {
                    b.Navigation("Wypozyczenia");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Pracownicy", b =>
                {
                    b.Navigation("Raporty");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Przedmioty", b =>
                {
                    b.Navigation("Wypozyczenia");
                });

            modelBuilder.Entity("Projekt_SBD.Models.Wypozyczenia", b =>
                {
                    b.Navigation("Zwrot")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
